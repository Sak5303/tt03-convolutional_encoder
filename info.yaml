--- 
# TinyTapeout project information
project:
  wokwi_id:    362770343640506369        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "seven_segment_seconds"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Sakthivel Thangapandian P K and Syed Abrar G"      # Your name
  title:        "Convolutional encoder"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Convolutional encoder performs convolution in the  input bitstream  "      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
     Convolutional encoder is one of the error correcting codes.The input bitstream is convolved and the output bits are transmitted.
     The receiver deciphers the bits using a Convolution decoder and thus the obtained data is error free.
# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
       sw3:1 acts as the clock
       sw3:7 (s0) and sw3:8 (s1) act as the select line for mux
       led7:x1 and led8:x2 act as outputs
       to realize the next output state, the select lines(s0 s1) have to be taken to the next state,
       the clock has to be switched on and switched off
       
       s0 s1    next state
        0 0     0 1
        0 1     1 0
        1 0     1 1
        1 1     0 0
       
       switch  binary value           decimal value
               (input bitstream)
       sw1:8       0000                     0
       sw1:7       0001                     1
       sw1:6       0010                     2
       sw1:5       0011                     3
       sw1:4       0100                     4
       sw1:3       0101                     5
       sw1:2       0110                     6
       sw1:1       0111                     7
       
       sw2:8       1000                     8
       sw2:7       1001                     9
       sw2:6       1010                     10
       sw2:5       1011                     11
       sw2:4       1100                     12
       sw2:3       1101                     13
       sw2:2       1110                     14
       sw2:1       1111                     15
       
       
# A description of what the inputs do
  inputs:               
       -sw1:8       0000                     
       -sw1:7       0001                     
       -sw1:6       0010                     
       -sw1:5       0011                     
       -sw1:4       0100                     
       -sw1:3       0101                     
       -sw1:2       0110                     
       -sw1:1       0111                     
       
       -sw2:8       1000                    
       -sw2:7       1001                    
       -sw2:6       1010                     
       -sw2:5       1011                    
       -sw2:4       1100                     
       -sw2:3       1101                     
       -sw2:2       1110                     
       -sw2:1       1111                     

# A description of what the outputs do
  outputs: output bitstream (|| indicates change s0 s1 to next state, 
  turn the clock on and turn off, to realize the next state of x1 x2)
      x1 x2   ||  x1 x2 ||    x1 x2   ||  x1 x2 ||     x1 x2    ||  x1 x2   ||  x1 x2
    - 00          00          00           00           00            00          00
    - 11          10          11           00           00            00          00           
    - 00          11          10           11           00            00          00
    - 11          01          01           11           00            00          00
    - 00          00          11           10           00            00          00
    - 11          10          00           10           00            00          00
    - 00          11          01           01           00            00          00
    - 11          01          10           01           00            00          00
    - 00          00          00           11           10            11          00
    - 11          10          11           11           10            11          00
    - 00          11          10           00           10            11          00
    - 11          01          01           00           10            11          00
    - 00          00          11           01           01            11          00
    - 11          10          00           01           01            11          00
    - 00          11          01           10           01            11          00
    - 11          01          10           10           01            11          00
    
# The following fields are optional
  tag:          "encoder"      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
